var defaultTemplate = (h => ({
  title,
  name = title,
  styles,
  scripts,
  content: Content = '',
  rootAttributes = {
    id: 'root'
  },
  lang = "en",
  themeColor = "#000",
  manifest = "/manifest.json",
  favicon = "/favicon.png"
}) => h("html", {
  lang: lang
}, h("head", null, h("title", null, name), h("meta", {
  charset: "utf-8"
}), h("meta", {
  name: "mobile-web-app-capable",
  content: "yes"
}), h("meta", {
  name: "viewport",
  content: "width=device-width, initial-scale=1.0"
}), h("meta", {
  name: "theme-color",
  content: themeColor
}), h("meta", {
  name: "apple-mobile-web-app-capable",
  content: "yes"
}), h("meta", {
  name: "apple-mobile-web-app-status-bar-style",
  content: "black"
}), h("link", {
  rel: "manifest",
  href: manifest
}), h("link", {
  rel: "shortcut icon",
  href: favicon
}), styles.map(href => h("link", {
  rel: "stylesheet",
  href: href
}))), h("body", null, h("div", rootAttributes, typeof Content == 'string' ? Content : h(Content, null)), scripts.map(src => h("script", {
  src: src
})))));

function toposort(nodes) {
  let deps, start, cut;
  deps = {};
  Object.values(nodes).forEach(function (parents) {
    return parents.forEach(function (id) {
      return deps[id] = (deps[id] || 0) + 1;
    });
  });
  start = Object.keys(nodes).filter(function (it) {
    return !(it in deps);
  });

  cut = function (it) {
    let head;
    head = nodes[it].map(function (id) {
      deps[id] -= 1;
      return deps[id] === 0 ? cut(id) : [];
    });
    return [].concat(it, ...head);
  };

  return [].concat(...start.map(cut)).reverse();
}

function createTemplate(component) {
  let h, renderString;
  ({
    h
  } = require("preact"));
  renderString = require("preact-render-to-string");
  return function (it) {
    return "<!DOCTYPE html>\n" + renderString(component(h)(it));
  };
}

function webpackAsset(source) {
  return {
    source: function () {
      return source;
    },
    size: function () {
      return source.length;
    }
  };
}

function manifest({
  chunkGroups,
  assets
}, {
  prefix = "/"
}) {
  var _context;

  let nodes, groupRef, sortedGroups, fileList, merged, list;
  nodes = Object.assign(...chunkGroups.map(function (it) {
    return {
      [it.id]: it.getParents().map(it => it.id)
    };
  }));
  groupRef = Object.assign(...chunkGroups.map(function (it) {
    return {
      [it.id]: it
    };
  }));
  sortedGroups = toposort(nodes).map(it => groupRef[it]);
  fileList = [].concat(...sortedGroups.map(function (it) {
    return [].concat(...it.chunks.map(it => it.files));
  }));
  merged = Object.assign({}, assets, ...fileList.map(function (it) {
    return {
      [it]: true
    };
  }));
  list = Object.keys(merged).map(function (it) {
    return prefix + it;
  });
  return {
    styles: list.filter((_context = /.css$/).test.bind(_context)),
    scripts: list.filter((_context = /.js$/).test.bind(_context))
  };
}

function generate(compilation, options) {
  let filename, props, renderTemplate;
  ({
    filename = "index.html"
  } = options);
  props = Object.assign({
    compilation
  }, manifest(compilation, options), options);
  renderTemplate = createTemplate(defaultTemplate);
  return {
    [filename]: webpackAsset(renderTemplate(props))
  };
}

function HtmlPlugin(options) {
  this.options = options;
}

HtmlPlugin.prototype.apply = function (compiler) {
  return compiler.hooks.emit.tap("html-plugin", compilation => {
    let assets;
    ({
      assets
    } = compilation);
    return Object.assign(assets, generate(compilation, this.options));
  });
};

module.exports = HtmlPlugin;
//# sourceMappingURL=index.js.map
